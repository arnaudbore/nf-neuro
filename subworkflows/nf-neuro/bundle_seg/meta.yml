name: "bundle_seg"
description: |
  Subworkflow to perform BundleSeg [1] to extract major white matter bundle from a tractogram.

  [1] St-Onge, Etienne, Kurt G. Schilling, and Francois Rheault.
      "BundleSeg: A versatile,reliable and reproducible approach to white
      matter bundle segmentation." International Workshop on Computational
      Diffusion MRI. Cham: Springer Nature Switzerland (2023)

  ---------  Steps  --------------------
  Anatomical Registration (ANTs)
      Use the FA map from the subject to register the atlas anatomical file and compute the transformations.
  Bundle Recognition (scilpy)
      Perform bundle recognition and extraction using BundleSeg.

  ---------  Experimental features -----
  !!! DISCLAIMER !!!
      The following features are experimental and may not work as expected. While we run tests to ensure
      computational stability of the subworkflow, we cannot guarantee the correctness of the results.
  Anatomical Registration (SynthMorph) : params.run_synthmorph = true
      Synthmorph is a machine learning-based registration method developed by the Freesurfer team. It is made
      available in this subworkflow by the REGISTRATION subworkflow, please refer to its documentation for
      more details.
keywords:
  - BundleSeg
  - WM bundles
  - Tractogram
  - Segmentation
components:
  - bundle/recognize
  - registration
args:
  - run_synthmorph:
      type: boolean
      description: "Run SynthMorph registration instead of ANTs."
      default: false
  - atlas_directory:
      type: directory
      default: ""
      description: |
        Use an alternative atlas to the default BundleSeg one available on Zenodo (https://zenodo.org/records/10103446).
        The folder MUST follow this specific structure:
              atlas_directory
              ├── atlas
              │   └── pop_average
              ├── centroids
              ├── *.json          (config file)
              └── *.{nii,nii.gz}  (atlas anatomical file)
input:
  - ch_fa:
      type: file
      description: |
        The input channel containing the FA map. This map is used to compute the transformation between the atlas'
        space and the subject's space.
        Structure: [ val(meta), path(fa) ]
      pattern: "*.{nii,nii.gz}"
      mandatory: true
  - ch_tractogram:
      type: file
      description: |
        The input channel containing the whole-brain tractogram to be segmented.
        Structure: [ val(meta), path(tractogram) ]
      pattern: "*.trk"
      mandatory: true
  - ch_freesurfer_license:
      type: file
      description: |
        ONLY USED WITH SYNTHMORPH REGISTRATION. The input channel containing the Freesurfer license file.
        Structure: [ val(meta), path(license) ]
      pattern: "*.txt"
      mandatory: false
output:
  - bundles:
      type: file
      description: |
        Channel containing all the segmented bundle files.
        Structure: [ val(meta), path(bundles) ]
      pattern: "*.trk"
  - mqc:
      type: file
      description: |
        Channel containing QC data for MultiQC reports.
        Structure: [ *mqc.* ]
      pattern: "*mqc.*"
      optional: true
  - versions:
      type: file
      description: |
        File containing software versions
        Structure: [ path(versions.yml) ]
      pattern: "versions.yml"
authors:
  - "@gagnonanthony"
  - "@AlexVCaron"
maintainers:
  - "@gagnonanthony"
