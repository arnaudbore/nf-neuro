nextflow_workflow {

    name "Test Subworkflow OUTPUT_TEMPLATE_SPACE"
    script "../main.nf"
    workflow "OUTPUT_TEMPLATE_SPACE"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfneuro"
    tag "subworkflows/output_template_space"
    tag "subworkflows/registration"
    tag "load_test_data"

    tag "registration/antsapplytransforms"
    tag "registration/tractogram"
    tag "image/applymask"
    tag "betcrop/fslbetcrop"
    tag "utils/templateflow"

    tag "stub"
    options "-stub-run"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "tractometry.zip", "freesurfer.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("Template MNI152NLin2009cAsym - local templates") {
        config "./local.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        tractometry: it.simpleName == "tractometry"
                    }
                input[0] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        file("\${test_data_directory}/mni_masked.nii.gz")
                    ]
                }
                input[1] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM.nii.gz")
                        ]
                    ]
                }
                input[2] = Channel.empty()
                input[3] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM_labels_map.nii.gz")
                        ]
                    ]
                }
                input[4] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM.trk"),
                            file("\${test_data_directory}/IFGWM_color.trk"),
                            file("\${test_data_directory}/IFGWM_uni.trk")
                        ]
                    ]
                }
                input[5] = Channel.empty()
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    ["ch_t1w_tpl", "ch_t2w_tpl"].contains(channel.key)
                                        ? file(subject).name
                                        : [ subject[0] ] + subject[1..-1].flatten().collect{ entry -> entry
                                            ? file(entry).name
                                            : "" }
                            } ]
                        }
                ).match()},
                { assert workflow.out
                    .findAll{ channel -> !channel.key.isInteger() }
                    .every{ channel -> ["ch_t1w_tpl",
                                        "ch_t2w_tpl",
                                        "ch_registered_anat",
                                        "ch_registered_labels_files",
                                        "ch_registered_nifti_files",
                                        "ch_registered_trk_files",
                                        "mqc",
                                        "versions"].contains(channel.key)
                        ? channel.value.every{ subject -> subject instanceof ArrayList
                                ? subject.every()
                                : subject }
                        : channel.value.size() == 0 } }
            )
        }
    }

    test("Template MNI152NLin2009aAsym - no brain mask") {
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        tractometry: it.simpleName == "tractometry"
                    }
                input[0] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        file("\${test_data_directory}/mni_masked.nii.gz")
                    ]
                }
                input[1] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM.nii.gz")
                        ]
                    ]
                }
                input[2] = Channel.empty()
                input[3] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM_labels_map.nii.gz")
                        ]
                    ]
                }
                input[4] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM.trk"),
                            file("\${test_data_directory}/IFGWM_color.trk"),
                            file("\${test_data_directory}/IFGWM_uni.trk")
                        ]
                    ]
                }
                input[5] = Channel.empty()
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    ["ch_t1w_tpl", "ch_t2w_tpl"].contains(channel.key)
                                        ? file(subject).name
                                        : [ subject[0] ] + subject[1..-1].flatten().collect{ entry -> entry
                                            ? file(entry).name
                                            : "" }
                            } ]
                        }
                ).match()},
                { assert workflow.out
                    .findAll{ channel -> !channel.key.isInteger() }
                    .every{ channel -> ["ch_t1w_tpl",
                                        "ch_t2w_tpl",
                                        "ch_registered_anat",
                                        "ch_registered_labels_files",
                                        "ch_registered_nifti_files",
                                        "ch_registered_trk_files",
                                        "mqc",
                                        "versions"].contains(channel.key)
                        ? channel.value.every{ subject -> subject instanceof ArrayList
                                ? subject.every()
                                : subject }
                        : channel.value.size() == 0 } }
            )
        }
    }

    test("Template MNI152NLin2009aAsym - using synthmorph registration") {
        config "./synthmorph.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        tractometry: it.simpleName == "tractometry"
                        freesurfer: it.simpleName == "freesurfer"
                    }
                input[0] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        file("\${test_data_directory}/mni_masked.nii.gz")
                    ]
                }
                input[1] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM.nii.gz")
                        ]
                    ]
                }
                input[2] = Channel.empty()
                input[3] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM_labels_map.nii.gz")
                        ]
                    ]
                }
                input[4] = ch_split_test_data.tractometry.map{
                    test_data_directory -> [
                        [ id: 'test' ], // meta map
                        [
                            file("\${test_data_directory}/IFGWM.trk"),
                            file("\${test_data_directory}/IFGWM_color.trk"),
                            file("\${test_data_directory}/IFGWM_uni.trk")
                        ]
                    ]
                }
                input[5] = ch_split_test_data.freesurfer.map{
                    test_data_directory -> file("\${test_data_directory}/license.txt")
                }
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    ["ch_t1w_tpl", "ch_t2w_tpl"].contains(channel.key)
                                        ? file(subject).name
                                        : [ subject[0] ] + subject[1..-1].flatten().collect{ entry -> entry
                                            ? file(entry).name
                                            : "" }
                            } ]
                        }
                ).match()},
                { assert workflow.out
                    .findAll{ channel -> !channel.key.isInteger() }
                    .every{ channel -> ["ch_registered_anat",
                                        "ch_t1w_tpl",
                                        "ch_t2w_tpl",
                                        "ch_registered_labels_files",
                                        "ch_registered_nifti_files",
                                        "ch_registered_trk_files",
                                        "mqc",
                                        "versions"].contains(channel.key)
                        ? channel.value.every{ subject -> subject instanceof ArrayList
                                ? subject.every()
                                : subject }
                        : channel.value.size() == 0 } }
            )
        }
    }
}
