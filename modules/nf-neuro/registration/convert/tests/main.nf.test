nextflow_process {

    name "Test Process REGISTRATION_CONVERT"
    script "../main.nf"
    process "REGISTRATION_CONVERT"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfneuro"
    tag "registration"
    tag "registration/convert"

    tag "subworkflows"
    tag "subworkflows/load_test_data"


    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "freesurfer.zip" , "freesurfer_reslice.zip" , "freesurfer_transforms.zip"] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("registration - convert - deformation - ras to itk (lps)") {
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        freesurfer: it.simpleName == "freesurfer"
                        reslice: it.simpleName == "freesurfer_reslice"
                        transforms: it.simpleName == "freesurfer_transforms"
                    }
                ch_transform = ch_split_test_data.transforms.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/fs_deform.nii.gz")
                    ]
                }
                ch_reference = ch_split_test_data.reslice.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_reslice.nii.gz")
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_transform
                    .join(ch_reference)
                    .join(ch_license)
                    .map{ meta, transform, reference, license -> [ meta, transform, "ras", "lps", reference, [], license ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - convert - affine - lta to fsl") {
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        freesurfer: it.simpleName == "freesurfer"
                        reslice: it.simpleName == "freesurfer_reslice"
                        transforms: it.simpleName == "freesurfer_transforms"
                    }
                ch_transform = ch_split_test_data.transforms.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/fs_affine.lta")
                    ]
                }
                ch_reference = ch_split_test_data.reslice.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/fa_reslice.nii.gz")
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_transform
                    .join(ch_reference)
                    .join(ch_license)
                    .map{ meta, transform, reference, license -> [ meta, transform, "lta", "fsl", reference, [], license ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - convert - mixed - to itk") {
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        freesurfer: it.simpleName == "freesurfer"
                        reslice: it.simpleName == "freesurfer_reslice"
                        transforms: it.simpleName == "freesurfer_transforms"
                    }
                ch_transforms = ch_split_test_data.transforms.map{
                    test_data_directory -> [
                        [[ id:'test1' ], [ id:'test2' ]],
                        [
                            file("\${test_data_directory}/fs_deform.nii.gz"),
                            file("\${test_data_directory}/fs_affine.lta")
                        ],
                        [ "ras", "lta" ],
                        [ "itk" ]
                    ]
                }
                ch_reference = ch_split_test_data.reslice.map{
                    test_data_directory -> [
                        [[ id:'test1' ], [ id:'test2' ]],
                        [
                            file("\${test_data_directory}/t1_reslice.nii.gz"),
                            file("\${test_data_directory}/fa_reslice.nii.gz")
                        ]
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> file("\${test_data_directory}/license.txt")
                }
                input[0] = ch_transforms
                    .join(ch_reference)
                    .transpose()
                    .combine(ch_license)
                    .map{ meta, transform, intype, outtype, reference, license ->
                        [ meta, transform, intype, outtype, reference, [], license ]
                    }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("registration - convert - affine - to lta (needs source)") {
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        freesurfer: it.simpleName == "freesurfer"
                        reslice: it.simpleName == "freesurfer_reslice"
                        transforms: it.simpleName == "freesurfer_transforms"
                    }
                ch_transform = ch_split_test_data.transforms.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/fsl_affine.mat")
                    ]
                }
                ch_reference = ch_split_test_data.reslice.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/fa_reslice.nii.gz")
                    ]
                }
                ch_source = ch_split_test_data.reslice.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_reslice.nii.gz")
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_transform
                    .map{ meta, transform -> [meta, transform, "fsl", "lta"] }
                    .join(ch_reference)
                    .join(ch_source)
                    .join(ch_license)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.transformation.get(0).get(1)).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("registration - convert - stub-run") {
        tag "stub"
        options "-stub-run"

        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        freesurfer: it.simpleName == "freesurfer"
                        reslice: it.simpleName == "freesurfer_reslice"
                        transforms: it.simpleName == "freesurfer_transforms"
                    }
                ch_transform = ch_split_test_data.transforms.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/fs_deform.nii.gz"),
                    ]
                }
                ch_reference = ch_split_test_data.reslice.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_reslice.nii.gz"),
                    ]
                }
                ch_license = ch_split_test_data.freesurfer.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/license.txt")
                    ]
                }
                input[0] = ch_transform
                    .join(ch_reference)
                    .join(ch_license)
                    .map{ meta, transform, reference, license -> [ meta, transform, "ras", "itk", reference, [], license ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }
    }
}
