# yaml-language-server: $schema=https://raw.githubusercontent.com/scilus/nf-neuro/main/modules/meta-schema.json
name: registration_antsapplytransforms
description: register image from transform
keywords:
  - MRI
  - registration
  - medical imaging
tools:
  - ANTs:
      description: perform registration using transform as input
      homepage: https://antsx.github.io/ANTsRCore/reference/antsApplyTransforms.html
      identifier: ""
args:
  - prefix:
      type: string
      description: |
        Prefix to add to the output file name.
        e.g. `warped` will result in `warped_image.nii.gz`.
      default: "${meta.id}"
  - suffix:
      type: string
      description: |
        Obligatory suffix to add to the output file name to prevent overwrite
        of input files. e.g. : the suffix `warped` will result in the name `image_warped.nii.gz`.
      default: "warped"
  - suffix_qc:
      type: string
      description: |
        Suffix to add to the quality control image file name.
        e.g. `qc` will result in `*qc_registration_antsapplytransforms_mqc.gif`.
  - dimensionality:
      type: number
      description: |
        Dimensionality of input images.
        e.g. `2` for 2D images, `3` for 3D images.
      default: 3
  - image_type:
      type: integer
      description: |
        Type of the input image :
          - 0: scalar
          - 1: vector
          - 2: tensor
          - 3: time series
          - 4: multichannel
          - 5: five-dimensional
      default: 0
      choices:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
  - interpolation:
      type: string
      description: |
        Interpolation method to use for the transformation. Content
        in `[...]` is optional. Refer the the antsApplyTransforms
        documentation for more details.
      default: Linear
      choices:
        - Linear
        - NearestNeighbor
        - MultiLabel[<sigma=imageSpacing>,<alpha=4.0>]
        - Gaussian[<sigma=imageSpacing>,<alpha=1.0>]
        - BSpline[<order=3>]
        - CosineWindowedSinc
        - WelchWindowedSinc
        - HammingWindowedSinc
        - LanczosWindowedSinc
        - GenericLabel[<interpolator=Linear>]
  - output_dtype:
      type: string
      description: Output data type for the warped image.
      default: default
      choices:
        - char
        - uchar
        - float
        - double
        - short
        - int
        - default
  - default_val:
      type: number
      description: |
        Default value to use for the input image. It specifies the voxel value when the input
        point maps outside the output domain.
      default: 0
  - run_qc:
      type: boolean
      description: |
        Whether to run quality control for the registration process.
        e.g. `true` to generate a quality control image, `false` to skip it.
      default: false
input:
  - - meta:
        type: map
        description: |
          Groovy Map containing sample information
          e.g. `[ id:'test', single_end:false ]`
    - images:
        type: list
        description: Input images to transform onto reference.
        pattern: "*.{nii.nii.gz}"
        mandatory: true
        ontologies:
          - edam: http://edamontology.org/format_4001 # NIFTI format]
    - reference:
        type: file
        description: Reference image for transformation.
        pattern: "*.{nii.nii.gz}"
        mandatory: true
        ontologies:
          - edam: http://edamontology.org/format_4001 # NIFTI format
    - transformations:
        type: list
        description: Transformation files (in the correct order).
        pattern: "*.{nii.gz,mat}"
        mandatory: true
        ontologies: []
output:
  warped_image:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'test', single_end:false ]`
      - "*.{nii,nii.gz}":
          type: file
          description: Warped image(s).
          pattern: "*.{nii,nii.gz}"
          ontologies: []
  mqc:
    - - meta:
          type: map
          description: |
            Groovy Map containing sample information
            e.g. `[ id:'test', single_end:false ]`
      - "*_registration_antsapplytransforms_mqc.gif":
          type: file
          description: |
            .gif file containing quality control image for the registration process.
            Made for use in MultiQC report.
          pattern: "*_registration_antsapplytransforms_mqc.gif"
          optional: true
          ontologies: []
  versions:
    - versions.yml:
        type: file
        description: File containing software versions
        pattern: versions.yml
        ontologies:
          - edam: http://edamontology.org/format_3750 # YAML
authors:
  - "@scilus"
