nextflow_process {

    name "Test Process REGISTRATION_SYNTHMORPH"
    script "../main.nf"
    process "REGISTRATION_SYNTHMORPH"

    tag "modules"
    tag "modules_nfneuro"
    tag "registration"
    tag "registration/synthmorph"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    // ** Assertion only uses file name since there is a discrepancy when tests are ran remotly. ** //
    // ** Synthmorph is an AI model and freesurfer does not control for randomness in computation yet, both in terms of seeding and operation ordering.** //

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "processing.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("registration - synthmorph") {
        config "./nextflow.config"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                    [ id:'test', single_end:false ],
                    file("\${test_data_directory}/mni_masked_2x2x2.nii.gz"),
                    file("\${test_data_directory}/b0_mean.nii.gz")
                ]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value  }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    [ subject[0] ] + subject[1..-1].flatten().collect{ entry -> entry ? file(entry).name : "" }
                            } ]
                        }
                ).match() }
            )
        }
    }

    test("registration - synthmorph - stub-run") {
        tag "stub"
        options "-stub-run"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                    [ id:'test', single_end:false ],
                    file("\${test_data_directory}/mni_masked_2x2x2.nii.gz"),
                    file("\${test_data_directory}/b0_mean.nii.gz")
                ]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }
    }
}
